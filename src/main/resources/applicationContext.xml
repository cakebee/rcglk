<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

<context:component-scan base-package="com.students">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
<!-- 引入jdbc配置文件 -->    
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>
               <value>classpath:*.properties</value>
                <!--要是有多个配置文件，只需在这里继续添加即可 -->
            </list>  
        </property>  
    </bean>  
      <!--  -->


    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName">
            <value>${jdbc_driverClassName}</value>
        </property>  
        <property name="url">
            <value>${jdbc_url}</value>
        </property>  
        <property name="username">
            <value>${jdbc_username}</value>
        </property>  
        <property name="password">
            <value>${jdbc_password}</value>
        </property>
    </bean>
    
    <!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
    <property name="basePackage"  value="com.students.mapper" >
    
    </property>
    
    </bean>
    
    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="mapperLocations" value="classpath*:com/students/mapper/ResumeMapper.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />  
        <!-- <property name="typeAliasesPackage" value="com.tiantian.ckeditor.model"   
            /> --> 
            
             <property name="plugins">  
        <array>  
            <bean class="com.github.pagehelper.PageInterceptor">  
                <property name="properties">  
                    <!--使用下面的方式配置参数，一行配置一个 -->  
                    <value>  
                        offsetAsPageNum=true  
                        rowBoundsWithCount=true  
                        pageSizeZero=true  
                        reasonable=true  
                    </value>  
                </property>  
            </bean>  
        </array>  
    </property>  
             
    </bean> 
    <context:component-scan base-package="com.students.bean"/>
    <context:component-scan base-package="com.students.service" />
    <context:component-scan base-package="com.students.controller" />
    <context:annotation-config/>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--控制住数据源  -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
    
    <aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* com.students.service..*(..))" id="txPoint"/>
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	<!--配置事务增强，事务如何切入  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*"/>
			<!--以get开始的所有方法  -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
     <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>  
    <task:scheduler id="qbScheduler" pool-size="10"/>
	
	
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
	<property name="messageConverters"> 
	<list> <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" /> 
	<ref bean="stringHttpMessageConverter" /> </list> </property> </bean> 
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter"> 
	<property name="supportedMediaTypes"> <list>
	 <value>text/plain;charset=UTF-8</value>
	  </list> 
	  </property> 
	  </bean>

    
	





</beans>
